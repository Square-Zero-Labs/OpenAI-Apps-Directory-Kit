import { promises as fs } from "node:fs";
import fsSync from "node:fs";
import path from "node:path";
import { fileURLToPath } from "node:url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const ROOT = path.resolve(__dirname, "..");

const DIRECTORY_CONFIG_PATH = path.join(
  ROOT,
  "directory_server_node",
  "config",
  "directory.json"
);
const DIRECTORY_DATA_PATH = path.join(
  ROOT,
  "directory_server_node",
  "data",
  "directory-places.json"
);
const DIRECTORY_DEFAULTS_TARGET = path.join(ROOT, "src", "directory-defaults.ts");

export const directoryConfigPaths = Object.freeze({
  config: DIRECTORY_CONFIG_PATH,
  data: DIRECTORY_DATA_PATH,
  target: DIRECTORY_DEFAULTS_TARGET
});

async function readJson(filePath) {
  try {
    const raw = await fs.readFile(filePath, "utf8");
    return JSON.parse(raw);
  } catch (error) {
    if (error && error.code === "ENOENT") {
      return null;
    }
    throw error;
  }
}

function buildClientUi(config) {
  return {
    theme: config?.theme ?? {},
    copy: config?.copy ?? {},
    branding: config?.branding ?? {},
    fields: config?.fields ?? {},
    map: config?.map ?? {},
    filters: config?.filters ?? {}
  };
}

function buildFallbackItems(data) {
  if (!data || !Array.isArray(data.items)) {
    return [];
  }
  return data.items;
}

function createFileBanner() {
  return [
    "/**",
    " * This file is auto-generated by scripts/directory-config.mjs.",
    " * Do not edit manually.",
    " */",
    ""
  ].join("\n");
}

function createDefaultsModule(ui, items, config) {
  const resultsTitle =
    config?.copy?.listTitle ??
    config?.copy?.appTitle ??
    config?.label ??
    "Directory Results";

  const directoryMeta =
    config?.label || config?.slug
      ? {
          label: config?.label ?? null,
          slug: config?.slug ?? null
        }
      : null;

  const structuredContent = {
    resultsTitle,
    items,
    ui
  };

  if (directoryMeta) {
    structuredContent.directory = directoryMeta;
  }

  const fileContent = `${createFileBanner()}export const defaultDirectoryUi = ${JSON.stringify(
    ui,
    null,
    2
  )};

export const defaultStructuredContent = ${JSON.stringify(
    structuredContent,
    null,
    2
  )};
`;

  return fileContent;
}

async function ensureDirectoryDefaults() {
  const config = (await readJson(DIRECTORY_CONFIG_PATH)) ?? {};
  const data = await readJson(DIRECTORY_DATA_PATH);

  const ui = buildClientUi(config);
  const items = buildFallbackItems(data);

  const contents = createDefaultsModule(ui, items, config);

  const prevContents = await fs
    .readFile(DIRECTORY_DEFAULTS_TARGET, "utf8")
    .catch(() => null);

  if (prevContents === contents) {
    return false;
  }

  await fs.mkdir(path.dirname(DIRECTORY_DEFAULTS_TARGET), { recursive: true });
  await fs.writeFile(DIRECTORY_DEFAULTS_TARGET, contents, "utf8");
  return true;
}

export async function syncDirectoryConfig(options = {}) {
  const changed = await ensureDirectoryDefaults();
  if (changed && options.log !== false) {
    console.log("[directory-config] Updated src/directory-defaults.ts");
  } else if (options.log) {
    console.log("[directory-config] src/directory-defaults.ts is up to date");
  }
  return changed;
}

export async function watchDirectoryConfig(callback) {
  const toWatch = [DIRECTORY_CONFIG_PATH, DIRECTORY_DATA_PATH];

  const watchers = toWatch.map((watchPath) =>
    fsSync.watch(watchPath, { persistent: true }, async (eventType) => {
      console.log(
        `[directory-config] Detected ${eventType} in ${path.relative(ROOT, watchPath)}`
      );
      try {
        await callback();
      } catch (error) {
        console.error("[directory-config] Watch callback failed", error);
      }
    })
  );

  const close = () =>
    watchers.forEach((watcher) => {
      watcher.close();
    });

  return { close };
}

if (process.argv[1] && path.resolve(process.argv[1]) === __filename) {
  const watch = process.argv.includes("--watch");
  const run = async () => {
    await syncDirectoryConfig({ log: true });
  };

  run().catch((error) => {
    console.error(error);
    process.exitCode = 1;
  });

  if (watch) {
    watchDirectoryConfig(async () => {
      await run();
    }).catch((error) => {
      console.error("[directory-config] Failed to start watcher", error);
      process.exitCode = 1;
    });
  }
}
